<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="fullBuild" name="bbti" xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    <description>
        #####################################################################
        #    Project build file by Martin Holmes (mholmes@uvic.ca), 2024.   #
        
        This build file will accomplish these basic tasks:
        
        * Process all TSV source files into simple XML.
        
        * Process that XML into TEI XML.
        
        * Create HTML pages from that TEI.
        
        * Copy other ancillary files such as CSS and JavaScript to the 
        output site.
        
        * Build indexes for staticSearch engine.
        
        It requires java libraries that are in the /lib/ folder.
        
        It also requires ant-contrib.
        
        Just type:
        
        ant
        
        at the command line to run the build. The results will appear in 
        the /site/ folder.
        
        #                                                                   #
        #####################################################################
    </description>
    
    <property name="echo.separator" value="************************************************"/>
    
    <!-- We'll need access to the date. -->
    <tstamp>
        <format property="today" pattern="yyyy-MM-dd" locale="en,CA"/>
    </tstamp>
    
    <!-- If we only want to run a single diagnostic. -->
    <property name="runOnly" value=""/>
    
    <!-- Folder for HTML website output. -->
    <property name="siteDir" value="${basedir}/site"/>
    
    <!-- Which GitHub branch of the staticSearch code we want to use in the build. Typically
  main or dev, unless testing a feature branch. -->
    <property name="staticSearchBranch" value="release-1.4"/>
    
    <!--  Some paths, libs and tasks. (May not all be needed.) -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <!-- Location of Saxon jar. -->
    <property name="saxon" value="${basedir}/lib/saxon-he-12.jar"/>
    
    <!-- Jing task for validation of XML. -->
    <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask" 
        classpath="${basedir}/lib/jing.jar"/>
    
    <fileset dir="${basedir}/sources" id="tsvSources">
        <include name="*.tsv"/>
    </fileset>
    
    <!-- The TEI we regenerate periodically. -->
    <fileset dir="${basedir}/tei" id="teiXml">
        <include name="**/*.xml"/>
    </fileset>
    
    
    <target name="fullBuild">
        <description>
            TARGET fullBuild
            This runs the complete build process.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Most of the code has not been written yet. &#x0a;Come back later."/>
        <echo message="${echo.separator}"/>
        <antcall target="preClean"/>
        <antcall target="allTsvToXml"/>
        <antcall target="tempXmlToTei"/>
        <antcall target="rngValidateTei"/>
        <antcall target="copyWebResources"/>
        <antcall target="buildCss"/>
        <antcall target="createXhtml"/>
        <antcall target="diagnostics"/>
    </target>
    
    <target name="webOnly">
        <description>
            TARGET webOnly
            This runs only the final part of the build process, starting from the TEI XML.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Most of the code has not been written yet. &#x0a;Come back later."/>
        <echo message="${echo.separator}"/>
        <antcall target="copyWebResources"/>
        <antcall target="buildCss"/>
        <antcall target="createXhtml"/>
        <antcall target="diagnostics"/>
    </target>
    
    <target name="preClean">
        <description>
            TARGET preClean
            This cleans up any detritus from previous builds.
        </description>
        <delete dir="${basedir}/tempXml"/>
        <delete dir="${basedir}/tei"/>
    </target>
    
    <target name="allTsvToXml">
        <description>
            TARGET allTsvToXml
            This passes each distinct TSV file to the transformation
            which converts it to simple XML.
        </description>
        <foreach target="tsvToXml" param="tsvFile">
            <fileset refid="tsvSources"/>
        </foreach>
    </target>
    
    <target name="tsvToXml">
        <description>
            TARGET tsvToXml
            This target runs XSLT to create simple XML
            from a single TSV file.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Converting ${tsvFile} to ad-hoc XML..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_tsv_to_xml.xsl"/>
            <arg value="-xsl:xsl/master_tsv_to_xml.xsl"/>
            <arg value="tsvFile=${tsvFile}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="Basic XML created."/>    
    </target>
    
    <target name="tempXmlToTei">
        <description>
            TARGET tempXmlToTei
            This target processes all the ad-hoc XML table files created
            in the above step into proper TEI.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Converting ad-hoc XML files to TEI..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_xml_to_tei.xsl"/>
            <arg value="-xsl:xsl/master_xml_to_tei.xsl"/>
            <arg value="basedir=${basedir}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="TEI XML created."/>    
    </target>
    
    <target name="rngValidateTei">
        <description>
            TARGET rngValidateTei
            This target validates the content of the tei
            folder, which contains all the site pages we have created.
            These files are validated against the beck.rng RelaxNG schema.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating TEI XML content documents with RelaxNG..."/>
        <jing compactsyntax="false" rngfile="${basedir}/tei/bbti.rng" failonerror="true">
            <fileset refid="teiXml"/>
        </jing>
    </target>
    
    <target name="createXhtml">
        <description>
            TARGET createXhtml
            This target builds all the site pages for the output.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Generating HTML pages for website..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_html.xsl"/>
            <arg value="-xsl:xsl/master_html.xsl"/>
            <arg value="baseDir=${basedir}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="HTML pages created."/>    
    </target>
    
    
    <target name="copyWebResources">
        <description>
            TARGET copyWebResources
            This copies all the ancillary files such as css, js,
            documentation, and images into the output site folder.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Copying required resources to the 'site' folder."/>
        <copy todir="${basedir}/site/css" preservelastmodified="true">
            <fileset dir="${basedir}/css" includes="*.css"/>
        </copy>
        <!--<copy todir="${basedir}/site/fonts" preservelastmodified="true">
            <fileset dir="${basedir}/fonts"/>
        </copy>-->
        <copy todir="${basedir}/site/js" preservelastmodified="true">
            <fileset dir="${basedir}/js"/>
        </copy>
        <copy todir="${basedir}/site/js" preservelastmodified="true">
            <file file="${basedir}/staticSearch/js/ssHighlight.js"/>
        </copy>
        <copy todir="${basedir}/site/images" preservelastmodified="true">
            <fileset dir="${basedir}/images"/>
        </copy>
        <!--<copy todir="site/documentation" preservelastmodified="true">
            <fileset dir="documentation">
                <include name="bbti.html"/>
                <include name="js/*"/>
                <include name="css/*"/>
            </fileset>
        </copy>-->
        <!--<copy todir="site" preservelastmodified="true">
            <fileset dir="favicons">
                <include name="*.*"/>
            </fileset>
        </copy>-->
    </target>
    
    <target name="buildCss">
        <description>
            TARGET buildCss
            This builds the SCSS file to create CSS and map file for the output site.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Building SCSS source to create CSS file in HTML folder."/>
        <mkdir dir="${basedir}/site/css"/>
        <exec executable="sass">
            <arg value="${basedir}/css/style.scss"/>
            <arg value="${basedir}/site/css/style.css"/>
        </exec>
    </target>
    
    <target name="diagnostics">
        <description>
            TARGET buildDiagnostics
            
            This target runs XSLT to create the diagnostics output and copies
            required files to the output location.
        </description>
        
        <echo message="${echo.separator}"/>
        <echo message="Creating diagnostics page..."/>
       
        <copy todir="${basedir}/site/css">
            <file file="css/diagnostics.css"/>
        </copy>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_diagnostics.xsl"/>
            <arg value="-xsl:xsl/master_diagnostics.xsl"/>
            <arg value="runOnly=${runOnly}"/>
            <arg value="baseDir=${basedir}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
  
</project>