<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="startFromTei" name="bbti" xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    <description>
        #####################################################################
        #    Project build file by Martin Holmes (mholmes@uvic.ca), 2024.   #
        
        This build file will accomplish these basic tasks:
        
        * Process all TSV source files into simple XML.
        
        * Process that XML into TEI XML.
        
        * Create HTML pages from that TEI.
        
        * Copy other ancillary files such as CSS and JavaScript to the 
        output site.
        
        * Build indexes for staticSearch engine.
        
        It requires java libraries that are in the /lib/ folder.
        
        It also requires ant-contrib.
        
        Just type:
        
        ant
        
        at the command line to run the build. The results will appear in 
        the /site/ folder.
        
        #                                                                   #
        #####################################################################
    </description>
    
    <property name="echo.separator" value="************************************************"/>
    
    <!-- We'll need access to the date. -->
    <tstamp>
        <format property="today" pattern="yyyy-MM-dd" locale="en,CA"/>
    </tstamp>
    
    <!-- If we only want to run a single diagnostic. -->
    <property name="runOnly" value=""/>
    
    <!-- For building only a few documents at one go in the HTML. -->
    <property name="docsToBuild" value=""/>
    
    <!-- Folder for HTML website output. -->
    <property name="siteDir" value="${basedir}/site"/>
    
    <!-- Which GitHub branch of the staticSearch code we want to use in the build. Typically
  main or dev, unless testing a feature branch. -->
    <property name="staticSearchBranch" value="release-1.4"/>
    
    <!--  Some paths, libs and tasks. (May not all be needed.) -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <!-- Location of Saxon jar. -->
    <property name="saxon" value="${basedir}/lib/saxon-he-12.jar"/>
    
    <!-- Jing task for validation of XML. -->
    <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask" 
        classpath="${basedir}/lib/jing.jar"/>
    
    <fileset dir="${basedir}/sources" id="tsvSources">
        <include name="*.tsv"/>
    </fileset>
    
    <!-- The TEI we regenerate periodically. -->
    <fileset dir="${basedir}/tei" id="teiXml">
        <include name="**/*.xml"/>
    </fileset>
    
    
    <target name="fullBuild">
        <description>
            TARGET fullBuild
            This runs the complete build process.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Doing a full site build..."/>
        <echo message="${echo.separator}"/>
        <antcall target="preClean"/>
        <antcall target="allTsvToXml"/>
        <antcall target="tempXmlToTei"/>
        <antcall target="rngValidateTei"/>
        <antcall target="gitHashForSuffix"/>
        <antcall target="copyWebResources"/>
        <antcall target="createXhtml"/>
        <antcall target="buildStaticSearch"/>
        <antcall target="validateSite"/>
        <antcall target="diagnostics"/>
        <antcall target="createHtaccess"/>
    </target>
    
    <target name="regenerateTei">
        <description>
            TARGET regenerateTei
            This runs the conversion from the TSV database dump
            to the TEI XML.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Regenerating TEI..."/>
        <echo message="${echo.separator}"/>
        <antcall target="allTsvToXml"/>
        <antcall target="tempXmlToTei"/>
        <antcall target="rngValidateTei"/>
    </target>
    
    <target name="startFromTempXml">
        <description>
            TARGET startFromXml
            This runs the build process starting from the interim XML.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Doing a site build starting from the temporary XML..."/>
        <echo message="${echo.separator}"/>
        <antcall target="tempXmlToTei"/>
        <antcall target="rngValidateTei"/>
        <antcall target="gitHashForSuffix"/>
        <antcall target="copyWebResources"/>
        <antcall target="createXhtml"/>
        <antcall target="buildStaticSearch"/>
        <antcall target="validateSite"/>
        <antcall target="diagnostics"/>
    </target>
    
    <target name="startFromTei">
        <description>
            TARGET startFromTei
            This runs the build process starting from the TEI source.
            This is the most common build process.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Doing a site build starting from the TEI..."/>
        <echo message="${echo.separator}"/>
        <antcall target="preClean"/>
        <antcall target="gitHashForSuffix"/>
        <antcall target="copyWebResources"/>
        <antcall target="createXhtml"/>
        <antcall target="buildStaticSearch"/>
        <antcall target="validateSite"/>
        <antcall target="diagnostics"/>
        <antcall target="createHtaccess"/>
    </target>
    
    <target name="startFromTeiOnJenkins">
        <description>
            TARGET startFromTeiOnJenkins
            This runs the build process starting from the TEI, but does not
            create the .htaccess file, because we don't need that on Jenkins.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Doing a site build starting from the TEI..."/>
        <echo message="${echo.separator}"/>
        <antcall target="preClean"/>
        <antcall target="gitHashForSuffix"/>
        <antcall target="copyWebResources"/>
        <antcall target="createXhtml"/>
        <antcall target="buildStaticSearch"/>
        <antcall target="validateSite"/>
        <antcall target="diagnostics"/>
    </target>
    
    <target name="webOnly">
        <description>
            TARGET webOnly
            This runs only the final part of the build process, starting from the TEI XML,
            and not running the staticSearch build. It does not validate the results.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Regenerating website only..."/>
        <echo message="${echo.separator}"/>
        <antcall target="gitHashForSuffix"/>
        <antcall target="copyWebResources"/>
        <antcall target="createXhtml"/>
    </target>
    
    <target name="preClean">
        <description>
            TARGET preClean
            This cleans up any detritus from previous builds.
        </description>
        <delete dir="${basedir}/tempXml"/>
        <delete file="${basedir}/gitHash.txt"/>
        <mkdir dir="site"/>
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/site">
                <include name="*"/>
                <include name="**/*"/>
            </fileset>
        </delete>
    </target>
    
    <target name="gitHashForSuffix">
        <description>
            TARGET gitHashForSuffix
            This simply outputs the first four characters of the 
            current git commit hash for use by staticSearch as a
            suffix for versioning.
        </description>
        <exec executable="git" dir="${basedir}" outputproperty="gitHash">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <echo file="${basedir}/gitHash.txt" message="${gitHash}"/>
        <replaceregexp file="${basedir}/gitHash.txt" match="^(.{4,4}).+$" replace="\1" flags="s"/>
    </target>
    
    <target name="allTsvToXml">
        <description>
            TARGET allTsvToXml
            This passes each distinct TSV file to the transformation
            which converts it to simple XML.
        </description>
        <foreach target="tsvToXml" param="tsvFile">
            <fileset refid="tsvSources"/>
        </foreach>
    </target>
    
    <target name="tsvToXml">
        <description>
            TARGET tsvToXml
            This target runs XSLT to create simple XML
            from a single TSV file.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Converting ${tsvFile} to ad-hoc XML..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_tsv_to_xml.xsl"/>
            <arg value="-xsl:xsl/master_tsv_to_xml.xsl"/>
            <arg value="tsvFile=${tsvFile}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="Basic XML created."/>    
    </target>
    
    <target name="tempXmlToTei">
        <description>
            TARGET tempXmlToTei
            This target processes all the ad-hoc XML table files created
            in the above step into proper TEI.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Converting ad-hoc XML files to TEI..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_xml_to_tei.xsl"/>
            <arg value="-xsl:xsl/master_xml_to_tei.xsl"/>
            <arg value="basedir=${basedir}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="TEI XML created."/>    
    </target>
    
    <target name="rngValidateTei">
        <description>
            TARGET rngValidateTei
            This target validates the content of the tei
            folder, which contains all the site pages we have created.
            These files are validated against the beck.rng RelaxNG schema.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating TEI XML content documents with RelaxNG..."/>
        <jing compactsyntax="false" rngfile="${basedir}/tei/bbti.rng" failonerror="true">
            <fileset refid="teiXml"/>
        </jing>
    </target>
    
    <target name="createXhtml">
        <description>
            TARGET createXhtml
            This target builds all the site pages for the output.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Generating HTML pages for website..."/>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_html.xsl"/>
            <arg value="-xsl:xsl/master_html.xsl"/>
            <arg value="baseDir=${basedir}"/>
            <arg value="docsToBuild=${docsToBuild}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
        <echo message="${echo.separator}"/>
        <echo message="HTML pages created."/>    
    </target>
    
    
    <target name="copyWebResources">
        <description>
            TARGET copyWebResources
            This copies all the ancillary files such as css, js,
            documentation, and images into the output site folder.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Copying required resources to the 'site' folder."/>
        <copy todir="${basedir}/site/css" preservelastmodified="true">
            <fileset dir="${basedir}/css" includes="*.css"/>
        </copy>
        <!--<copy todir="${basedir}/site/fonts" preservelastmodified="true">
            <fileset dir="${basedir}/fonts"/>
        </copy>-->
        <copy todir="${basedir}/site/js" preservelastmodified="true">
            <fileset dir="${basedir}/js"/>
        </copy>
        <copy todir="${basedir}/site/js" preservelastmodified="true">
            <file file="${basedir}/staticSearch/js/ssHighlight.js"/>
        </copy>
        <copy todir="${basedir}/site/images" preservelastmodified="true">
            <fileset dir="${basedir}/images"/>
        </copy>
        <copy todir="${basedir}/site/xml" preservelastmodified="true">
            <fileset dir="${basedir}/tei">
                <include name="**/*.xml"/>
                <include name="**/*.odd"/>
                <include name="**/*.rng"/>
            </fileset> 
        </copy>
    </target>
    
    <target name="createHtaccess">
        <description>
            TARGET createHtaccess
            This puts a simple .htaccess file in the site directory,
            so that it will be uploaded along with everything else.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Creating .htaccess..."/>
        <echo file="${basedir}/site/.htaccess">
DirectoryIndex index.html
Options +Indexes
</echo>
    </target>
    
    <target name="buildStaticSearch">
        <description>
            TARGET buildStaticSearch
            This target uses the code in the staticSearch folder, previously populated
            by downloading that project's code from GitHub, to create a static search engines
        </description>
        
        <echo message="${echo.separator}"/>
        <echo message="Building static search..."/>
        <ant antfile="build.xml" dir="staticSearch">
            <property name="ssConfig" value="../config_staticSearch.xml"/>
        </ant>
    </target>
    
    <target name="validateSite">
        <description>
            TARGET validateSite
            This target validates the complete collection of XHTML5 documents 
            comprising the output site, using the VNU validator (the same validator used by 
            the W3C's online validation service).
            Before it can proceed, it has to copy the jar file, which is stored with an 
            obfuscated name so that it doesn't break Oxygen's ability to build TEI ODD 
            files due to a duplicate class.
        </description>
        <echo message="${echo.separator}"/>
        <echo message="Validating the HTML pages produced in the build using the VNU validator."/>
        <copy file="${basedir}/lib/vnu.jarx" tofile="${basedir}/lib/vnu.jar"/>
        <java jar="${basedir}/lib/vnu.jar" failonerror="false" fork="true">
            <arg value="--format text"/>
            <arg value="--skip-non-html"/>
            <arg value="--errors-only"/>
            <arg value="${basedir}/site"/>
        </java>
        <delete file="${basedir}/lib/vnu.jar"/>
    </target>
    
    <target name="diagnostics">
        <description>
            TARGET buildDiagnostics
            
            This target runs XSLT to create the diagnostics output and copies
            required files to the output location.
        </description>
        
        <echo message="${echo.separator}"/>
        <echo message="Creating diagnostics page..."/>
       
        <copy todir="${basedir}/site/css">
            <file file="css/diagnostics.css"/>
        </copy>
        <java fork="true" classname="net.sf.saxon.Transform" 
            classpath="${saxon}" 
            failonerror="true">
            <jvmarg value="-Xmx2048m"/>
            <arg value="-s:xsl/master_diagnostics.xsl"/>
            <arg value="-xsl:xsl/master_diagnostics.xsl"/>
            <arg value="runOnly=${runOnly}"/>
            <arg value="baseDir=${basedir}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
  
</project>